{"version":3,"sources":["component/InputField.js","component/Toggle.js","component/TodoItem.js","component/TodoList.js","component/FilterBtns.js","component/ClearBtn.js","App.js","index.js"],"names":["InputField","state","title","handleInput","event","value","target","_this","setState","handleSubmit","preventDefault","props","addNewTodo","this","react_default","a","createElement","onSubmit","onBlur","name","onChange","className","placeholder","React","Component","Toggle","_ref","toggleAll","type","id","htmlFor","TodoItem","todo","toggleChecked","deleteItem","key","completed","checked","onClick","TodoList","todoList","filterByButton","filter","item","map","component_TodoItem","FilterBtns","sort","filterBtn","filteredBy","handleFilter","_this2","href","ClearBtn","deleteAllCompletedTodos","style","display","some","App","text","todoItem","Date","now","prevState","concat","Object","toConsumableArray","countUncompletedTodos","length","uncompletedTodos","taskId","withoutRemovedItems","filterBy","objectSpread","every","done","_this$state","component_InputField","component_Toggle","component_TodoList","component_FilterBtns","component_ClearBtn","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.7d201fdc.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass InputField extends React.Component {\n  state = {\n    title: '',\n  }\n\n  handleInput = (event) => {\n    const { value } = event.target;\n\n    this.setState({\n      title: value,\n    });\n  }\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (this.state.title) {\n      this.props.addNewTodo(this.state.title);\n\n      this.setState({\n        title: '',\n      });\n    }\n  }\n\n  render() {\n    const { title } = this.state;\n\n    return (\n      <form\n        onSubmit={this.handleSubmit}\n        onBlur={this.handleSubmit}\n      >\n        <input\n          name=\"todo\"\n          value={title}\n          onChange={this.handleInput}\n          className=\"new-todo\"\n          placeholder=\"Add new ToDo !\"\n        />\n      </form>\n    );\n  }\n}\n\nInputField.propTypes = {\n  addNewTodo: PropTypes.func.isRequired,\n};\n\nexport default InputField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Toggle = ({ toggleAll }) => (\n  <div>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onChange={toggleAll}\n    />\n    {/* eslint-disable-next-line */}\n    <label htmlFor=\"toggle-all\">\n      Mark all as complete\n    </label>\n  </div>\n);\n\nToggle.propTypes = {\n  toggleAll: PropTypes.arrayOf(PropTypes.object).isRequired,\n};\n\nexport default Toggle;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst TodoItem = ({\n  todo, toggleChecked, deleteItem,\n}) => (\n  <li key={todo.id} className={todo.completed ? 'completed' : ''}>\n    <div className=\"view\">\n      <input\n        type=\"checkbox\"\n        className=\"toggle\"\n        id={todo.id}\n        checked={todo.completed}\n        onChange={() => toggleChecked(todo.id)}\n      />\n      {/* eslint-disable-next-line */}\n      <label htmlFor={todo.id}>\n        {todo.title}\n      </label>\n      <button\n        type=\"button\"\n        className=\"destroy\"\n        onClick={() => deleteItem(todo.id)}\n      />\n    </div>\n  </li>\n);\n\nTodoItem.propTypes = {\n  todo: PropTypes.arrayOf(PropTypes.object).isRequired,\n  toggleChecked: PropTypes.func.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n};\n\nexport default TodoItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from './TodoItem';\n\nconst TodoList = ({\n  todoList, filterByButton, toggleChecked, deleteItem,\n}) => {\n  const filterBy = (item) => {\n    if (filterByButton === 'Completed') {\n      return item.completed;\n    }\n\n    if (filterByButton === 'Active') {\n      return !item.completed;\n    }\n\n    return item;\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {todoList\n        .filter(todo => filterBy(todo))\n        .map(todo => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            toggleChecked={toggleChecked}\n            deleteItem={deleteItem}\n          />\n        ))}\n    </ul>\n  );\n};\n\nTodoList.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  toggleChecked: PropTypes.func.isRequired,\n  deleteItem: PropTypes.func.isRequired,\n  filterByButton: PropTypes.string.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass FilterBtns extends React.Component {\n  state = {\n    sort: 1,\n  }\n\n  filterBtn = (id, filteredBy) => {\n    this.setState({\n      sort: id,\n    });\n\n    this.props.handleFilter(filteredBy);\n  }\n\n  render() {\n    return (\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={this.state.sort === 1 && 'selected'}\n            onClick={() => this.filterBtn(1, 'All')}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={this.state.sort === 2 && 'selected'}\n            onClick={() => this.filterBtn(2, 'Active')}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={this.state.sort === 3 && 'selected'}\n            onClick={() => this.filterBtn(3, 'Completed')}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n    );\n  }\n}\n\nFilterBtns.propTypes = {\n  handleFilter: PropTypes.func.isRequired,\n};\n\nexport default FilterBtns;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ClearBtn = ({ todoList, deleteAllCompletedTodos }) => (\n  <button\n    type=\"button\"\n    className=\"clear-completed\"\n    style={{ display: 'block' }}\n    onClick={deleteAllCompletedTodos}\n  >\n    {todoList.some(todo => todo.completed === true) && 'Clear Completed'}\n  </button>\n);\n\nClearBtn.propTypes = {\n  todoList: PropTypes.arrayOf(PropTypes.object).isRequired,\n  deleteAllCompletedTodos: PropTypes.func.isRequired,\n};\n\nexport default ClearBtn;\n","import React from 'react';\nimport InputField from './component/InputField';\nimport Toggle from './component/Toggle';\nimport TodoList from './component/TodoList';\nimport FilterBtns from './component/FilterBtns';\nimport ClearBtn from './component/ClearBtn';\n\nclass App extends React.Component {\n  state = {\n    todoList: [],\n    filterByButton: '',\n  };\n\n  addNewTodo = (text) => {\n    const todoItem = {\n      title: text,\n      id: Date.now(),\n      completed: false,\n    };\n\n    this.setState((prevState) => {\n      const todos = [...prevState.todoList, todoItem];\n\n      return {\n        todoList: todos,\n      };\n    });\n  };\n\n  countUncompletedTodos = () => this.state.todoList\n    .filter(item => !item.completed).length;\n\n  deleteAllCompletedTodos = () => {\n    this.setState((prevState) => {\n      const uncompletedTodos = prevState.todoList\n        .filter(item => !item.completed);\n\n      return {\n        todoList: [...uncompletedTodos],\n      };\n    });\n  };\n\n  deleteItem = (taskId) => {\n    this.setState((prevState) => {\n      const withoutRemovedItems = prevState.todoList\n        .filter(item => item.id !== taskId);\n\n      return {\n        todoList: [...withoutRemovedItems],\n      };\n    });\n  }\n\n  handleFilter = (filterBy) => {\n    this.setState({\n      filterByButton: filterBy,\n    });\n  };\n\n  toggleAll = () => {\n    this.setState((prevState) => {\n      const todos = prevState.todoList.map(todo => ({\n        ...todo,\n        completed: !prevState.todoList.every(done => done.completed),\n      }));\n\n      return {\n        todoList: todos,\n      };\n    });\n  };\n\n  toggleChecked = (taskId) => {\n    this.setState((prevState) => {\n      const todos = prevState.todoList.map(todo => (todo.id === taskId\n        ? {\n          ...todo,\n          completed: !todo.completed,\n        }\n        : todo));\n\n      return {\n        todoList: todos,\n      };\n    });\n  };\n\n  render() {\n    const { todoList, filterByButton } = this.state;\n    const countUncompletedTodos = this.countUncompletedTodos();\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <InputField addNewTodo={this.addNewTodo} />\n        </header>\n\n        <section className=\"main\" style={{ display: 'block' }}>\n          <Toggle toggleAll={this.toggleAll} />\n\n          <TodoList\n            filterByButton={filterByButton}\n            todoList={todoList}\n            toggleChecked={this.toggleChecked}\n            deleteItem={this.deleteItem}\n          />\n        </section>\n\n        <footer className=\"footer\" style={{ display: 'block' }}>\n          <span className=\"todo-count\">\n            {countUncompletedTodos}\n            items left\n          </span>\n\n          <FilterBtns\n            handleFilter={this.handleFilter}\n          />\n\n          <ClearBtn\n            todoList={todoList}\n            deleteAllCompletedTodos={this.deleteAllCompletedTodos}\n          />\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}